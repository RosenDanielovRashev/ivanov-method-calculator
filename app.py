import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objs as go

@st.cache_data
def load_data():
    df = pd.read_csv("combined_data.csv")
    # –ê–∫–æ –≤—Å–µ –æ—â–µ –∏–º–∞—à —Å—Ç–∞—Ä–∏—Ç–µ –∏–º–µ–Ω–∞, –∑–∞–º–µ–Ω–∏ –≥–∏ —Ç—É–∫
    df = df.rename(columns={
        "E1_over_E2": "Ed_over_Ei",
        "Eeq_over_E2": "Ee_over_Ei"
    })
    return df

data = load_data()

def compute_Eeq(h, D, Ed, Ei):
    hD = h / D
    EdEi = Ed / Ei
    tol = 1e-4
    iso_levels = sorted(data['Ee_over_Ei'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        grp_low = data[data['Ee_over_Ei'] == low].sort_values('h_over_D')
        grp_high = data[data['Ee_over_Ei'] == high].sort_values('h_over_D')

        h_min = max(grp_low['h_over_D'].min(), grp_high['h_over_D'].min())
        h_max = min(grp_low['h_over_D'].max(), grp_high['h_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        try:
            y_low = np.interp(hD, grp_low['h_over_D'], grp_low['Ed_over_Ei'])
            y_high = np.interp(hD, grp_high['h_over_D'], grp_high['Ed_over_Ei'])
        except:
            continue

        if not (min(y_low, y_high) - tol <= EdEi <= max(y_low, y_high) + tol):
            continue

        frac = 0 if np.isclose(y_high, y_low) else (EdEi - y_low) / (y_high - y_low)
        ee_over_ei = low + frac * (high - low)

        st.write("üìå –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É:", f"{low:.2f} ‚Üí {high:.2f}")
        return ee_over_ei * Ei, hD, y_low, y_high

    return None, None, None, None

st.title("üìê –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä: –ú–µ—Ç–æ–¥ –Ω–∞ –ò–≤–∞–Ω–æ–≤ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å–∏—è)")

# –í—Ö–æ–¥–æ–≤–µ
Ed = st.number_input("Ed (MPa)", value=2600.0)
Ei = st.number_input("Ei (MPa)", value=3000.0)
Ee = st.number_input("Ee (MPa)", value=2700.0)  # –î–æ–±–∞–≤–∏—Ö –≤—Ö–æ–¥ –∑–∞ Ee –ø–æ —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ
h = st.number_input("h (cm)", value=20.0)
D = st.number_input("D (cm)", value=40.0)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 0, –∑–∞ –¥–∞ –Ω—è–º–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0
if Ei == 0 or D == 0:
    st.error("Ei –∏ D –Ω–µ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç 0.")
    st.stop()

# –ü—Ä–µ—Å–º—è—Ç–∞–º–µ Ee_over_Ei –æ—Ç Ee –∏ Ei –∑–∞ —Å–ø—Ä–∞–≤–∫–∞
Ee_over_Ei = Ee / Ei

st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∏ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è:")
st.write(pd.DataFrame({
    "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["Ed", "Ei", "Ee", "h", "D", "Ed / Ei", "Ee / Ei", "h / D"],
    "–°—Ç–æ–π–Ω–æ—Å—Ç": [
        Ed,
        Ei,
        Ee,
        h,
        D,
        round(Ed / Ei, 3),
        round(Ee_over_Ei, 3),
        round(h / D, 3)
    ]
}))

if st.button("–ò–∑—á–∏—Å–ª–∏"):
    result, hD_point, y_low, y_high = compute_Eeq(h, D, Ed, Ei)
    EdEi_point = Ed / Ei

    if result is None:
        st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
    else:
        st.success(f"‚úÖ –ò–∑—á–∏—Å–ª–µ–Ω–æ Ee = {result:.2f} MPa (Ee / Ei = {result / Ei:.3f})")

        # –ì—Ä–∞—Ñ–∏–∫–∞ —Å –≤—Å–∏—á–∫–∏ –∏–∑–æ–ª–∏–Ω–∏–∏ –∏ —Ç–æ—á–∫–∞—Ç–∞
        fig = go.Figure()

        for value, group in data.groupby("Ee_over_Ei"):
            group_sorted = group.sort_values("h_over_D")
            fig.add_trace(go.Scatter(
                x=group_sorted["h_over_D"],
                y=group_sorted["Ed_over_Ei"],
                mode='lines',
                name=f"Ee / Ei = {value:.2f}",
                line=dict(width=1)
            ))

        # –¢–æ—á–∫–∞—Ç–∞
        fig.add_trace(go.Scatter(
            x=[hD_point],
            y=[EdEi_point],
            mode='markers',
            name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞",
            marker=dict(size=8, color='red', symbol='circle')
        ))

        # –õ–∏–Ω–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è
        if y_low is not None and y_high is not None:
            fig.add_trace(go.Scatter(
                x=[hD_point, hD_point],
                y=[y_low, y_high],
                mode='lines',
                line=dict(color='green', width=2, dash='dot'),
                name="–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–Ω–∞ –ª–∏–Ω–∏—è"
            ))

        fig.update_layout(
            title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–∞ –Ω–∞ –∏–∑–æ–ª–∏–Ω–∏–∏ (Ee / Ei)",
            xaxis_title="h / D",
            yaxis_title="Ed / Ei",
            xaxis=dict(dtick=0.1),
            yaxis=dict(dtick=0.05),
            legend=dict(orientation="h", y=-0.3),
            height=700
        )

        st.plotly_chart(fig, use_container_width=True)
