import streamlit as st
import pandas as pd
import numpy as np
from scipy.interpolate import griddata
from scipy.spatial import Delaunay
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon

# –ö–µ—à–∏—Ä–∞–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
@st.cache_data
def load_data():
    return pd.read_csv("combined_data.csv")

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
data = load_data()
points = data[['h_over_D', 'E1_over_E2']].values
values = data['Eeq_over_E2'].values

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
def compute_Eeq(h, D, E1, E2):
    hD = h / D
    E1E2 = E1 / E2
    ratio = griddata(points, values, (hD, E1E2), method='linear')
    if np.isnan(ratio):
        return None
    return ratio * E2

# –ó–∞–≥–ª–∞–≤–∏–µ
st.title("üìê –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä: –ú–µ—Ç–æ–¥ –Ω–∞ –ò–≤–∞–Ω–æ–≤ (—Å —Ä–µ–∞–ª–Ω–∏ –∏–∑–æ–ª–∏–Ω–∏–∏)")

# –í—Ö–æ–¥–Ω–∏ –ø–æ–ª–µ—Ç–∞
E1 = st.number_input("E1 (MPa)", value=2600)
E2 = st.number_input("E2 (MPa)", value=3000)
h = st.number_input("h (cm)", value=20)
D = st.number_input("D (cm)", value=40)

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
st.write(pd.DataFrame({
    "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["E1", "E2", "h", "D", "E1 / E2", "h / D"],
    "–°—Ç–æ–π–Ω–æ—Å—Ç": [E1, E2, h, D, round(E1 / E2, 3), round(h / D, 3)]
}))

# –ë—É—Ç–æ–Ω –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
if st.button("–ò–∑—á–∏—Å–ª–∏"):
    result = compute_Eeq(h, D, E1, E2)
    hD_point = h / D
    E1E2_point = E1 / E2
    interp_point = np.array([hD_point, E1E2_point])

    if result is None:
        st.warning("–ò–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞. –î–æ–±–∞–≤–∏ –æ—â–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
        triangle_vertices = None
    else:
        st.success(f"Eeq = {result:.2f} MPa")
        st.info(f"Eeq / E2 = {result / E2:.3f}")

        # --- –ù–∞–º–µ—Ä–∏ —Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è ---
        tri = Delaunay(points)
        simp_index = tri.find_simplex(interp_point)

        if simp_index == -1:
            st.warning("–¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω —Ç—Ä–∏–∞–Ω–≥—É–ª–∞—Ü–∏—è—Ç–∞ ‚Äì –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø–æ–∫–∞–∂–µ —Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫.")
            triangle_vertices = None
        else:
            vert_indices = tri.simplices[simp_index]
            triangle_vertices = points[vert_indices]

        # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
        fig, ax = plt.subplots(figsize=(12, 8))

        # –ò–∑–æ–ª–∏–Ω–∏–∏ –æ—Ç –¥–∞–Ω–Ω–∏—Ç–µ
        for value, group in data.groupby("Eeq_over_E2"):
            group_sorted = group.sort_values("h_over_D")
            ax.plot(group_sorted["h_over_D"], group_sorted["E1_over_E2"],
                    label=f"Eeq/E2 = {value:.2f}")

        # –ß–µ—Ä–≤–µ–Ω–∞ —Ç–æ—á–∫–∞ ‚Äì –≤—ä–≤–µ–¥–µ–Ω–∞ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        ax.scatter([hD_point], [E1E2_point], color='red', label="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞", zorder=5)

        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–µ–Ω —Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫
        if triangle_vertices is not None:
            triangle = Polygon(triangle_vertices, color='orange', alpha=0.3, label="–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–µ–Ω —Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫")
            ax.add_patch(triangle)
            ax.plot(*zip(*triangle_vertices, triangle_vertices[0]), color='orange')

        ax.set_xlabel("h / D")
        ax.set_ylabel("E1 / E2")
        ax.set_title("–ò–∑–æ–ª–∏–Ω–∏–∏ –Ω–∞ Eeq / E2 (–æ—Ç —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏)")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)
