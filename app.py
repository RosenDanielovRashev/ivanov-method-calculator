import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

@st.cache_data
def load_data():
    return pd.read_csv("combined_data.csv")

data = load_data()

def compute_Eeq(h, D, E1, E2):
    hD = h / D
    E1E2 = E1 / E2
    tol = 1e-4  # —Ç–æ–ª–µ—Ä–∞–Ω—Å
    iso_levels = sorted(data['Eeq_over_E2'].unique())
    debug_info = []

    for low, high in zip(iso_levels, iso_levels[1:]):
        grp_low = data[data['Eeq_over_E2'] == low].sort_values('h_over_D')
        grp_high = data[data['Eeq_over_E2'] == high].sort_values('h_over_D')

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ h/D –ø–æ–ø–∞–¥–∞ –∏ –≤ –¥–≤–µ—Ç–µ
        h_min = max(grp_low['h_over_D'].min(), grp_high['h_over_D'].min())
        h_max = min(grp_low['h_over_D'].max(), grp_high['h_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        # –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–∞–º–µ E1/E2 –ø—Ä–∏ –¥–∞–¥–µ–Ω–æ h/D
        try:
            y_low = np.interp(hD, grp_low['h_over_D'], grp_low['E1_over_E2'])
            y_high = np.interp(hD, grp_high['h_over_D'], grp_high['E1_over_E2'])
        except:
            continue

        debug_info.append({
            '–ò–∑–æ–ª–∏–Ω–∏–∏': f"{low:.2f}-{high:.2f}",
            'y_low': y_low,
            'y_high': y_high,
            'E1/E2': E1E2
        })

        if not (min(y_low, y_high) - tol <= E1E2 <= max(y_low, y_high) + tol):
            continue

        frac = 0 if np.isclose(y_high, y_low) else (E1E2 - y_low) / (y_high - y_low)
        eq_over_e2 = low + frac * (high - low)

        st.write("üìå –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É:", f"{low:.2f} ‚Üí {high:.2f}")
        st.write(f"üîπ y_low = {y_low:.4f}, y_high = {y_high:.4f}, E1/E2 = {E1E2:.4f}")
        st.write(f"üîπ frac = {frac:.4f}, Eeq/E2 = {eq_over_e2:.4f}")
        return eq_over_e2 * E2

    # –ê–∫–æ –Ω–µ —Å–µ –Ω–∞–º–µ—Ä–∏ –Ω–∏—â–æ ‚Äî –ø–æ–∫–∞–∑–≤–∞–º–µ –æ—Ç –∫–∞–∫–≤–æ –∏–∑–±–∏—Ä–∞
    st.info("üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è (–Ω—è–º–∞ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ):")
    st.write(pd.DataFrame(debug_info))
    return None

st.title("üìê –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä: –ú–µ—Ç–æ–¥ –Ω–∞ –ò–≤–∞–Ω–æ–≤ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å–∏—è)")

# –í—Ö–æ–¥
E1 = st.number_input("E1 (MPa)", value=2600)
E2 = st.number_input("E2 (MPa)", value=3000)
h = st.number_input("h (cm)", value=20)
D = st.number_input("D (cm)", value=40)

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ç–∞
st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
st.write(pd.DataFrame({
    "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["E1", "E2", "h", "D", "E1 / E2", "h / D"],
    "–°—Ç–æ–π–Ω–æ—Å—Ç": [E1, E2, h, D, round(E1 / E2, 3), round(h / D, 3)]
}))

# –ò–∑—á–∏—Å–ª–µ–Ω–∏–µ
if st.button("–ò–∑—á–∏—Å–ª–∏"):
    result = compute_Eeq(h, D, E1, E2)
    hD_point = h / D
    E1E2_point = E1 / E2

    if result is None:
        st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
    else:
        st.success(f"‚úÖ Eeq = {result:.2f} MPa")
        st.info(f"Eeq / E2 = {result / E2:.3f}")

        # –ì—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(12, 8))
        for value, group in data.groupby("Eeq_over_E2"):
            group_sorted = group.sort_values("h_over_D")
            ax.plot(group_sorted["h_over_D"], group_sorted["E1_over_E2"],
                    label=f"Eeq/E2 = {value:.2f}")

        ax.scatter([hD_point], [E1E2_point], color='red', label="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞", zorder=5)
        ax.set_xticks(np.arange(0, 2.05, 0.1))
        ax.set_yticks(np.arange(0, 0.95, 0.05))
        ax.set_xlabel("h / D")
        ax.set_ylabel("E1 / E2")
        ax.set_title("–ò–∑–æ–ª–∏–Ω–∏–∏ –Ω–∞ Eeq / E2 (—Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏)")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)
