import streamlit as st
import pandas as pd
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt

@st.cache_data
def load_data():
    return pd.read_csv("combined_data.csv")

data = load_data()

def compute_Eeq(h, D, E1, E2):
    hD = h / D
    E1E2 = E1 / E2

    # –ì—Ä—É–ø–∏—Ä–∞–Ω–µ –ø–æ –∏–∑–æ–ª–∏–Ω–∏–∏
    iso_levels = sorted(data['Eeq_over_E2'].unique())
    for i in range(len(iso_levels) - 1):
        low = iso_levels[i]
        high = iso_levels[i + 1]

        group_low = data[data["Eeq_over_E2"] == low]
        group_high = data[data["Eeq_over_E2"] == high]

        # –ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω–∏ —Ç–æ—á–∫–∏ –∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        points = pd.concat([group_low, group_high])[['h_over_D', 'E1_over_E2']].values
        values = np.array([low]*len(group_low) + [high]*len(group_high))

        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è —Å–∞–º–æ –º–µ–∂–¥—É —Ç–µ–∑–∏ –¥–≤–µ –∏–∑–æ–ª–∏–Ω–∏–∏
        result = griddata(points, values, (hD, E1E2), method='linear')

        if not np.isnan(result):
            return result * E2

    # –ò–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞
    return None

st.title("üìê –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä: –ú–µ—Ç–æ–¥ –Ω–∞ –ò–≤–∞–Ω–æ–≤ (—Å —Ä–µ–∞–ª–Ω–∏ –∏–∑–æ–ª–∏–Ω–∏–∏)")

# –í—Ö–æ–¥–Ω–∏ –ø–æ–ª–µ—Ç–∞
E1 = st.number_input("E1 (MPa)", value=2600)
E2 = st.number_input("E2 (MPa)", value=3000)
h = st.number_input("h (cm)", value=20)
D = st.number_input("D (cm)", value=40)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏ —Å—ä–æ—Ç–Ω–æ—à–µ–Ω–∏—è
st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
st.write(pd.DataFrame({
    "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["E1", "E2", "h", "D", "E1 / E2", "h / D"],
    "–°—Ç–æ–π–Ω–æ—Å—Ç": [E1, E2, h, D, round(E1 / E2, 3), round(h / D, 3)]
}))

# –ë—É—Ç–æ–Ω –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
if st.button("–ò–∑—á–∏—Å–ª–∏"):
    result = compute_Eeq(h, D, E1, E2)
    hD_point = h / D
    E1E2_point = E1 / E2

    if result is None:
        st.warning("–¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
    else:
        st.success(f"Eeq = {result:.2f} MPa")
        st.info(f"Eeq / E2 = {result / E2:.3f}")

        # –ì—Ä–∞—Ñ–∏–∫–∞ —Å–∞–º–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏
        fig, ax = plt.subplots(figsize=(12, 8))
        for value, group in data.groupby("Eeq_over_E2"):
            group_sorted = group.sort_values("h_over_D")
            ax.plot(group_sorted["h_over_D"], group_sorted["E1_over_E2"],
                    label=f"Eeq/E2 = {value:.2f}")

        ax.scatter([hD_point], [E1E2_point], color='red', label="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞", zorder=5)
        ax.set_xlabel("h / D")
        ax.set_ylabel("E1 / E2")
        ax.set_title("–ò–∑–æ–ª–∏–Ω–∏–∏ –Ω–∞ Eeq / E2 (–æ—Ç —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏)")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)
