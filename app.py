import streamlit as st
import pandas as pd
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt

# –ö–µ—à–∏—Ä–∞–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ CSV
@st.cache_data
def load_data():
    return pd.read_csv("combined_data.csv")

data = load_data()

# –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
points = data[['h_over_D', 'E1_over_E2']].values
values = data['Eeq_over_E2'].values

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
def compute_Eeq(h, D, E1, E2):
    hD = h / D
    E1E2 = E1 / E2
    ratio = griddata(points, values, (hD, E1E2), method='linear')
    if np.isnan(ratio):
        return None
    return ratio * E2

# –ó–∞–≥–ª–∞–≤–∏–µ
st.title("üìê –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä: –ú–µ—Ç–æ–¥ –Ω–∞ –ò–≤–∞–Ω–æ–≤ (—Å —Ä–µ–∞–ª–Ω–∏ –∏–∑–æ–ª–∏–Ω–∏–∏)")

# –í—Ö–æ–¥–Ω–∏ –ø–æ–ª–µ—Ç–∞
E1 = st.number_input("E1 (MPa)", value=2600)
E2 = st.number_input("E2 (MPa)", value=3000)
h = st.number_input("h (cm)", value=20)
D = st.number_input("D (cm)", value=40)

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—ä–≤–µ–¥–µ–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
st.write(pd.DataFrame({
    "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["E1", "E2", "h", "D", "E1 / E2", "h / D"],
    "–°—Ç–æ–π–Ω–æ—Å—Ç": [E1, E2, h, D, round(E1 / E2, 3), round(h / D, 3)]
}))

# –ò–∑—á–∏—Å–ª–µ–Ω–∏–µ
if st.button("–ò–∑—á–∏—Å–ª–∏"):
    result = compute_Eeq(h, D, E1, E2)
    hD_point = h / D
    E1E2_point = E1 / E2
    interp_ratio = result / E2 if result else None

    if result is None:
        st.warning("–ò–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞. –î–æ–±–∞–≤–∏ –æ—â–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
    else:
        st.success(f"Eeq = {result:.2f} MPa")
        st.info(f"Eeq / E2 = {interp_ratio:.3f}")

        # ---- –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –¥–≤–µ —Å—ä—Å–µ–¥–Ω–∏ –∏–∑–æ–ª–∏–Ω–∏–∏ ----
        iso_levels = sorted(data["Eeq_over_E2"].unique())
        lower, upper = None, None

        for i in range(len(iso_levels) - 1):
            if iso_levels[i] <= interp_ratio <= iso_levels[i + 1]:
                lower = iso_levels[i]
                upper = iso_levels[i + 1]
                break

        if lower is not None and upper is not None:
            st.info(f"üìà –¢–æ—á–∫–∞—Ç–∞ –µ –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏–∏ Eeq/E2 = {lower:.2f} –∏ {upper:.2f}")
        else:
            st.warning("–¢–æ—á–∫–∞—Ç–∞ —Å—ä–≤–ø–∞–¥–∞ —Å –∏–∑–æ–ª–∏–Ω–∏—è –∏–ª–∏ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞.")

        # ---- –ì—Ä–∞—Ñ–∏–∫–∞ ----
        fig, ax = plt.subplots(figsize=(12, 8))

        for value, group in data.groupby("Eeq_over_E2"):
            group_sorted = group.sort_values("h_over_D")

            if value == lower or value == upper:
                ax.plot(group_sorted["h_over_D"], group_sorted["E1_over_E2"],
                        linewidth=3, linestyle='--', color='blue',
                        label=f"‚òÖ Eeq/E2 = {value:.2f}")
            else:
                ax.plot(group_sorted["h_over_D"], group_sorted["E1_over_E2"],
                        linewidth=1, alpha=0.5, label=f"Eeq/E2 = {value:.2f}")

        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ç–æ—á–∫–∞—Ç–∞
        ax.scatter([hD_point], [E1E2_point], color='red', s=100, zorder=5, label="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞")

        ax.set_xlabel("h / D")
        ax.set_ylabel("E1 / E2")
        ax.set_title("–ò–∑–æ–ª–∏–Ω–∏–∏ –Ω–∞ Eeq / E2 (–æ—Ç —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏)")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)
